/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Experimental gradle configuration.  This file may not be up to date.
 */

apply plugin: 'com.android.library'
apply plugin: 'com.google.protobuf'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    compileOptions() {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 28
        resConfigs "en"
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        debug {
            minifyEnabled false
            buildConfigField "boolean", "AOSP", "true"
            buildConfigField "boolean", "ENG", "true"
            buildConfigField "boolean", "NO_JNI_TEST", "false"
        }
        release {
            minifyEnabled true
            buildConfigField "boolean", "AOSP", "true"
            buildConfigField "boolean", "ENG", "false"
            buildConfigField "boolean", "NO_JNI_TEST", "false"
        }
    }

    sourceSets {
        main {
            res.srcDirs = ['res']
            java.srcDirs = ['src']
            manifest.srcFile 'AndroidManifest.xml'
            proto {
                srcDir 'src/com/android/tv/common/compat/internal'
            }
            proto {
                srcDir 'src/com/android/tv/common/flags/proto'
            }
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}

dependencies {
    compileOnly files('../libs/framework.jar')
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.leanback:leanback:1.1.0-alpha02'
    implementation 'androidx.palette:palette:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.recyclerview:recyclerview-selection:1.0.0'
    implementation 'androidx.tvprovider:tvprovider:1.0.0'

    implementation 'com.google.android.exoplayer:exoplayer:r1.5.16'
    implementation 'com.google.android.exoplayer:exoplayer-core:2.10.1'
    annotationProcessor 'com.google.auto.value:auto-value:1.5.3'
    implementation 'com.google.auto.value:auto-value:1.5.3'
    implementation 'com.google.dagger:dagger:2.23'
    implementation 'com.google.dagger:dagger-android:2.23'
    annotationProcessor 'com.google.dagger:dagger-android-processor:2.23'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.23'
    implementation 'com.google.guava:guava:28.0-jre'
    implementation 'com.google.protobuf:protobuf-java:3.0.0'
}
protobuf {
    // Configure the protoc executable
    protoc {
        artifact = 'com.google.protobuf:protoc:3.0.0'

        plugins {
            javalite {
                // The codegen for lite comes as a separate artifact
                artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
            }
        }

        generateProtoTasks {
            all().each {
                task ->
                    task.builtins {
                        remove java
                    }
                    task.plugins {
                        javalite {}
                    }
            }
        }
    }

}
//preBuild {
//    doLast {
//        def imlFile = file(project.name + ".iml")
//        println 'Change ' + project.name + '.iml order'
//        try {
//            def parsedXml = (new XmlParser()).parse(imlFile)
//            def jdkNode = parsedXml.component[1].orderEntry.find { it.'@type' == 'jdk' }
//            parsedXml.component[1].remove(jdkNode)
//            def sdkString = "Android API " + android.compileSdkVersion.substring("android-".length()) +
//                    " Platform"
//            new Node(parsedXml.component[1], 'orderEntry',
//                    ['type': 'jdk', 'jdkName': sdkString, 'jdkType': 'Android SDK'])
//            groovy.xml.XmlUtil.serialize(parsedXml, new FileOutputStream(imlFile))
//        } catch (FileNotFoundException e) {
//            // nop, iml not found
//        }
//    }
//}